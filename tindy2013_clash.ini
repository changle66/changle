[common]
;API 模式，设置为 true 以防止直接加载本地订阅或通过 Web 界面提供本地文件
api_mode=false

;执行关键操作所使用的访问令牌，通过 Web 界面
api_access_token=password

;默认 URL，在请求中未提供 URL 时使用，使用 "|" 分隔多个订阅链接，支持本地文件/URL
default_url=

;插入到请求中的订阅链接。可用于将节点添加到所有导出的订阅中。
enable_insert=true
;插入到订阅链接的 URL，使用 "|" 分隔多个订阅链接，支持本地文件/URL
insert_url=
;将插入的 URL 前置到订阅链接。在插入的 URL 中的节点将首先添加到具有非组特定匹配模式的组中。
prepend_insert_url=true

;排除匹配以下模式的节点。支持正则表达式。
exclude_remarks=(到期|剩余流量|时间|官网|产品|平台)
;exclude_remarks=(其他规则)

;仅包括匹配以下模式的节点。支持正则表达式。
;include_remarks=V3.*港

;启用用于筛选节点的脚本支持
enable_filter=false
;用于筛选节点的脚本。支持内联脚本和脚本路径。脚本中应定义一个带有一个参数（节点）的 "filter" 函数。
;示例：内联脚本：将值设置为脚本的内容。将所有换行符替换为 "\n"。
;       脚本路径：将值设置为 "path:/path/to/script.js"。
;filter_script=function filter(node) {\n    const info = JSON.parse(node.ProxyInfo);\n    if(info.EncryptMethod.includes('chacha20'))\n        return true;\n    return false;\n}

;在未指定外部配置文件时将外部配置文件设置为默认值，支持本地文件/URL
;default_external_config=config/example_external_config.ini

;'rule_base' 选项在外部配置文件中的文件作用域限制。
base_path=base

;生成器使用的 Clash 配置基础，支持本地文件/URL
clash_rule_base=base/all_base.tpl

;生成器使用的 Surge 配置基础，支持本地文件/URL
surge_rule_base=base/all_base.tpl

;生成器使用的 Surfboard 配置基础，支持本地文件/URL
surfboard_rule_base=base/all_base.tpl

;生成器使用的 Mellow 配置基础，支持本地文件/URL
mellow_rule_base=base/all_base.tpl

;生成器使用的 Quantumult 配置基础，支持本地文件/URL
quan_rule_base=base/all_base.tpl

;生成器使用的 Quantumult X 配置基础，支持本地文件/URL
quanx_rule_base=base/all_base.tpl

;生成器使用的 Loon 配置基础，支持本地文件/URL
loon_rule_base=base/all_base.tpl

;生成器使用的 Shadowsocks Android 配置基础，支持本地文件/URL
sssub_rule_base=base/all_base.tpl

;生成器使用的 sing-box 配置基础，支持本地文件/URL
singbox_rule_base=base/all_base.tpl

;用于下载配置、规则集或订阅的代理，设置为 NONE 或为空以禁用它，设置为 SYSTEM 以使用系统代理。
;接受 cURL 支持的代理（http:// https:// socks4a:// socks5://）
;对于 CORS 代理的额外支持（ https://github.com/Rob--W/cors-anywhere https://github.com/Zibri/cloudflare-cors-anywhere 等），在地址前加上 "cors:" 以识别地址为 CORS 代理。
;示例：  http://127.0.0.1:80  socks5://example.com:1080  cors:https://cors-anywhere.herokuapp.com/
proxy_config=SYSTEM
proxy_ruleset=SYSTEM
proxy_subscription=NONE

;在请求 /sub 时，首先重新加载此配置文件。
reload_conf_on_request=false

[userinfo]
;从节点中提取流数据的规则
;格式：full_match_regex|new_format_regex
;其中 new_format_regex 应该类似于 "total=$1&left=$2&used=$3"
stream_rule=^剩余流量：(.*?)\|总流量：(.*)$|total=$2&left=$1
stream_rule=^剩余流量：(.*?) (.*)$|total=$1&left=$2
stream_rule=^Bandwidth: (.*?)/(.*)$|used=$1&total=$2
stream_rule=^\[.*?\]剩余(.*?)@(?:.*)$|total=$1
stream_rule=^.*?流量:(.*?) 剩:(?:.*)$|total=$1

;从节点中提取到期时间数据的规则
;格式：full_match_regex|new_format_regex
;其中 new_format_regex 应该遵循此示例：yyyy:mm:dd:hh:mm:ss
time_rule=^过期时间：(\d+)-(\d+)-(\d+) (\d+):(\d+):(\d+)$|$1:$2:$3:$4:$5:$6
time_rule=^到期时间(:|：)(\d+)-(\d+)-(\d+)$|$1:$2:$3:0:0:0
time_rule=^Smart Access expire: (\d+)/(\d+)/(\d+)$|$1:$2:$3:0:0:0
time_rule=^.*?流量:(?:.*?) 剩:(.*)$|left=$1d

[node_pref]
;udp_flag=false
;tcp_fast_open_flag=false
;skip_cert_verify_flag=false
;tls13_flag=false

sort_flag=false
;用于对节点进行排序的脚本。应在脚本中定义一个具有两个参数的 "compare" 函数，这两个参数是要比较的两个节点。支持内联脚本和脚本路径。
;在 [common] 部分的 filter_script 选项中可以看到示例。
;sort_script=function compare(node_a, node_b) {\n    const info_a =